<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Ghotfall's Corner</title><link>https://ghotfall.com/tags/kubernetes/</link><description>Recent content in kubernetes on Ghotfall's Corner</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://ghotfall.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Authenticating to the Kubernetes API with client-go</title><link>https://ghotfall.com/blog/2020/08/01/authenticating-to-the-kubernetes-api-with-client-go/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://ghotfall.com/blog/2020/08/01/authenticating-to-the-kubernetes-api-with-client-go/</guid><description>Client-go, go library for talking to a kubernetes cluster, provides few ways for authenticating to the Kubernetes API. Possible steps are quite different for apps which are running inside and outside the cluster.
Your actions would be quite simple if you planning to pack your golang app in container and use it within pod. Let&amp;rsquo;s look at the example:
config, err := rest.InClusterConfig() if err != nil { panic(err.Error()) // oops, something went wrong, you can&amp;#39;t make calls to k8s API :( } But keep in mind that this approach uses the Service Account token.</description></item></channel></rss>